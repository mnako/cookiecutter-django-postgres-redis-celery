version: '2.1'
services:
  db:
    image: "postgres:11-alpine"
    restart: always
    environment:
      POSTGRES_HOST: $POSTGRES_HOST
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - ./db/.pgdata:/var/lib/postgresql/data/
      - ./logs/db:/var/log/postgresql
    mem_limit: 4G
    healthcheck:
      test: echo 'SELECT 1' | PGPASSWORD=$POSTGRES_PASSWORD psql --host $$HOSTNAME --user $POSTGRES_USER $POSTGRES_DB
      interval: 1m
      timeout: 10s
      retries: 3

  redis:
    image: "redis:6.0.9-alpine"
    restart: always
    mem_limit: 1G
    healthcheck:
      test: redis-cli PING || exit 1
      interval: 1m
      timeout: 10s
      retries: 3

  nginx:
    build: ./nginx
    image: "{{ cookiecutter.project_name }}_nginx:${PROJECT_VERSION}"
    restart: always
    ports:
      - "80:80"
      - "443:443"
    links:
      - app

  app:
    build: ./app
    image: "{{ cookiecutter.project_name }}_app:${PROJECT_VERSION}"
    restart: always
    ports:
     - "8999:8999"
    links:
     - db
     - redis
    depends_on:
     - redis
     - db
    volumes:
     - /app/media:/app/media
    environment:
      DJANGO_SETTINGS_MODULE: $DJANGO_SETTINGS_MODULE
      POSTGRES_HOST: $POSTGRES_HOST
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    mem_limit: 2G
    healthcheck:
      test: curl --fail http://localhost:8000/ || exit 1
      interval: 1m
      timeout: 10s
      retries: 3

  migrate:
    image: "{{ cookiecutter.project_name }}_app:${PROJECT_VERSION}"
    command: sh entrypoints/migrate.sh
    restart: on-failure
    # container_name prevents scaling the migrate container beyond 1
    container_name: ${COMPOSE_PROJECT_NAME}_migrate
    environment:
      DJANGO_SETTINGS_MODULE: $DJANGO_SETTINGS_MODULE
      DJANGO_SECRET_KEY: $DJANGO_SECRET_KEY
      POSTGRES_HOST: $POSTGRES_HOST
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      REDIS_URL: $REDIS_URL

  celery:
    build: ./celery
    image: "{{ cookiecutter.project_name }}_celery:${PROJECT_VERSION}"
    restart: always
    links:
     - db
     - redis
     - app
    depends_on:
     - app
    environment:
      DJANGO_SETTINGS_MODULE: $DJANGO_SETTINGS_MODULE
      POSTGRES_HOST: $POSTGRES_HOST
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    mem_limit: 2G
    healthcheck:
      test: celery -A {{ cookiecutter.project_name }} inspect ping -d celery@$$HOSTNAME || exit 1
      interval: 1m
      timeout: 10s
      retries: 3

  celerybeat:
    build: ./celerybeat
    image: "{{ cookiecutter.project_name }}_celerybeat:${PROJECT_VERSION}"
    restart: always
    links:
     - db
     - redis
     - app
    depends_on:
     - celery
    environment:
      DJANGO_SETTINGS_MODULE: $DJANGO_SETTINGS_MODULE
      POSTGRES_HOST: $POSTGRES_HOST
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    mem_limit: 512m
    healthcheck:
      test: ps -p $$(cat /var/run/celerybeat.pid) || exit 1
      interval: 1m
      timeout: 10s
      retries: 3