version: "3.8"
services:
  db:
    image: "postgres:15.2-alpine3.17"
    restart: "on-failure"
    environment:
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
     - ./db/.pgdata:/var/lib/postgresql/data/
    healthcheck:
      test: "echo 'SELECT 1' | PGPASSWORD=$POSTGRES_PASSWORD psql --host $$HOSTNAME --user $POSTGRES_USER $POSTGRES_DB"
      interval: 15s
      timeout: 15s
      retries: 4

  redis:
    image: "redis:7.0.10-alpine3.17"
    command: >
      --requirepass ${REDIS_PASSWORD}
    restart: "on-failure"
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    healthcheck:
      test: "redis-cli PING || exit 1"
      interval: 15s
      timeout: 15s
      retries: 4

  migrate:
    image: "{{ cookiecutter.project_name }}_webapp:dev"
    command: "pdm run python manage.py migrate"
    restart: "on-failure"
    depends_on:
      db:
        condition: service_healthy
    # container_name prevents scaling the migrate container beyond 1
    container_name: "${COMPOSE_PROJECT_NAME}_migrate"
    environment:
      DJANGO_SETTINGS_MODULE: "${DJANGO_SETTINGS_MODULE}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      REDIS_URL: "${REDIS_URL}"
    volumes:
      - ./webapp:/app

  collectstatic:
    image: "{{ cookiecutter.project_name }}_webapp:dev"
    command: "pdm run python manage.py collectstatic --clear --noinput"
    restart: "on-failure"
    # container_name prevents scaling the collectstatic container beyond 1
    container_name: "${COMPOSE_PROJECT_NAME}_collectstatic"
    environment:
      DJANGO_SETTINGS_MODULE: "${DJANGO_SETTINGS_MODULE}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      REDIS_URL: "${REDIS_URL}"
    volumes:
      - ./webapp:/app

  webapp:
    build: "./webapp"
    image: "{{ cookiecutter.project_name }}_webapp:dev"
    restart: "on-failure"
    ports:
     - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      collectstatic:
        condition: service_completed_successfully
    environment:
      DJANGO_SETTINGS_MODULE: "${DJANGO_SETTINGS_MODULE}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      REDIS_URL: "${REDIS_URL}"
    volumes:
     - ./webapp:/app
    healthcheck:
      test: "curl --fail http://localhost:8000/?healthcheck || exit 1"
      interval: 15s
      timeout: 15s
      retries: 4

  celeryworker:
    image: "{{ cookiecutter.project_name }}_webapp:dev"
    command: "pdm run python manage.py runcelery"
    restart: "on-failure"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      collectstatic:
        condition: service_completed_successfully
    environment:
      DJANGO_SETTINGS_MODULE: "${DJANGO_SETTINGS_MODULE}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      REDIS_URL: "${REDIS_URL}"
    volumes:
     - ./webapp:/app
    healthcheck:
      test: "pdm run celery -A {{ cookiecutter.project_name }}.celery inspect ping -d celery@celery || exit 1"
      interval: 15s
      timeout: 15s
      retries: 4

  celerybeat:
    image: "{{ cookiecutter.project_name }}_webapp:dev"
    command: "pdm run python manage.py runcelerybeat"
    restart: "on-failure"
    depends_on:
      celeryworker:
        condition: service_healthy
    environment:
      DJANGO_SETTINGS_MODULE: "${DJANGO_SETTINGS_MODULE}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      REDIS_URL: "${REDIS_URL}"
    volumes:
     - ./webapp:/app
    healthcheck:
      test: "ps -p $$(cat /tmp/celerybeat.pid) || exit 1"
      interval: 15s
      timeout: 15s
      retries: 4
